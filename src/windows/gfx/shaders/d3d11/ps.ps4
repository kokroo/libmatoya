// Copyright (c) Christopher D. Dickson <cdd@matoya.group>
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this file,
// You can obtain one at https://spdx.org/licenses/MIT.html.

struct VS_OUTPUT {
	float4 position : SV_POSITION;
	float2 texcoord : TEXCOORD;
};

cbuffer VS_CONSTANT_BUFFER : register(b0) {
	float width;
	float height;
	float vp_height;
	float pad0;
	uint4 effects;
	float4 levels;
	uint planes;
	uint rotation;
	uint conversion;
	uint hdr;
	uint diffmode;
	float diffbrighten;
};

SamplerState ss {
};

Texture2D tex0 : register(t0);
Texture2D tex1 : register(t1);
Texture2D tex2 : register(t2);
Texture2D texdiffrgba : register(t3);
Texture2D texdiffrgb10a2 : register(t4);

static const float SDR_MAX_NITS = 80.0f; // the reference sRGB luminance is 80 nits (aka the brightness of paper white)

inline float4 yuv_to_rgba(uint conversion, uint hdr, float y, float u, float v)
{
	// 10-bit -> 16-bit
	if (conversion & 0x4) {
		y *= 64.0;
		u *= 64.0;
		v *= 64.0;
	}

	// Full range
	if (conversion & 0x1) {
		// 10-bit
		if (conversion & 0x2) {
			u -= (512.0 / 1023.0);
			v -= (512.0 / 1023.0);

		} else {
			u -= (128.0 / 255.0);
			v -= (128.0 / 255.0);
		}

	// Limited
	} else {
		// 10-bit
		if (conversion & 0x2) {
			y = (y - 64.0 / 1023.0) * (1023.0 / 876.0);
			u = (u - 512.0 / 1023.0) * (1023.0 / 896.0);
			v = (v - 512.0 / 1023.0) * (1023.0 / 896.0);

		} else {
			y = (y - 16.0 / 255.0) * (255.0 / 219.0);
			u = (u - 128.0 / 255.0) * (255.0 / 224.0);
			v = (v - 128.0 / 255.0) * (255.0 / 224.0);
		}
	}

	float kr = hdr ? 0.2627 : 0.2126;
	float kb = hdr ? 0.0593 : 0.0722;

	float r = y + (2.0 - 2.0 * kr) * v;
	float b = y + (2.0 - 2.0 * kb) * u;
	float g = (y - kr * r - kb * b) / (1.0 - kr - kb);

	return float4(r, g, b, 1.0);
}

inline float4 sample_rgba(uint planes, uint conversion, uint hdr, float2 uv)
{
	float4 pixel0 = tex0.Sample(ss, uv);

	if (planes == 2) {
		float4 pixel1 = tex1.Sample(ss, uv);
		float y = pixel0.r;
		float u = pixel1.r;
		float v = pixel1.g;

		return yuv_to_rgba(conversion, hdr, y, u, v);

	} else if (planes == 3) {
		float y = pixel0.r;
		float u = tex1.Sample(ss, uv).r;
		float v = tex2.Sample(ss, uv).r;

		return yuv_to_rgba(conversion, hdr, y, u, v);

	} else if (conversion & 0x8) {
		// AYUV
		float y = pixel0.r;
		float u = pixel0.g;
		float v = pixel0.b;

		// Y410
		if (conversion & 0x2) {
			y = pixel0.g;
			u = pixel0.r;
		}

		return yuv_to_rgba(conversion, hdr, y, u, v);

	} else {
		return pixel0;
	}
}

inline void sharpen(float w, float h, float level, inout float2 uv)
{
	float2 res = float2(w, h);
	float2 p = uv * res;
	float2 c = floor(p) + 0.5;
	float2 dist = p - c;

	if (level >= 0.5) {
		dist = 16.0 * dist * dist * dist * dist * dist;

	} else {
		dist = 4.0 * dist * dist * dist;
	}

	uv = (c + dist) / res;
}

inline void scanline(float y, float h, float level, inout float4 rgba)
{
	float n = floor(h / 240.0);

	if (fmod(floor(y * h), n) < n / 2.0)
		rgba *= level;
}

inline float2 rotate(uint rotation, float2 texcoord)
{
	float2 uv = texcoord;

	// Rotation
	if (rotation == 1 || rotation == 3) {
		float tmp = uv[0];
		uv[0] = uv[1];
		uv[1] = tmp;
	}

	// Flipped vertically
	if (rotation == 1 || rotation == 2)
		uv[1] = 1.0 - uv[1];

	// Flipped horizontally
	if (rotation == 2 || rotation == 3)
		uv[0] = 1.0 - uv[0];

	return uv;
}

float lab_lightness(const float x)
{
	const float epsilon = 216.0f / 24389.0f;
	const float kappa = 24389.0f / 27.0f / 116.0f;

	return x > epsilon ? sign(x) * pow(abs(x), 1.0f / 3.0f) : (kappa * x + 16.0f / 116.0f);
}

float3 rgb_to_lab(const float3 rgb, const float3x3 rgb_to_xyz, const float3 xyz_white)
{
	// Courtesy of Bruce Lindbloom	

	// RGB to XYZ
	// http://brucelindbloom.com/Eqn_RGB_to_XYZ.html
	const float3 xyz = mul(rgb_to_xyz, rgb);

	// XYZ to Lab	
	// http://brucelindbloom.com/Eqn_XYZ_to_Lab.html
	const float3 r = rgb / xyz_white;
	const float3 f = float3(
		lab_lightness(r.x),
		lab_lightness(r.y),
		lab_lightness(r.z)
	);
	return float3(
		116.0f * f.y - 16.0f,
		500.0f * (f.x - f.y),
		200.0f * (f.y - f.z)
	);
}

float delta_e(const float3 rgb_A, const float3 rgb_B, const float3x3 rgb_to_xyz, const float3 xyz_white)
{	
	float3 lab_A = rgb_to_lab(rgb_A, rgb_to_xyz, xyz_white);
	float3 lab_B = rgb_to_lab(rgb_B, rgb_to_xyz, xyz_white);

	const float3 sqdist = pow(lab_B - lab_A, 2);
	const float variance = sqdist[0] + sqdist[1] + sqdist[2];
	return sqrt(variance);
}

// Thanks to colour.py module for these constants
static const float3x3 REC709_TO_XYZ =
{
	{0.4124,  0.3576,  0.1805},
	{0.2126,  0.7152,  0.0722},
	{0.0193,  0.1192,  0.9505}
};

// Thanks to colour.py module for these constants
static const float3x3 REC2020_TO_XYZ =
{
	{0.63696,  0.14462,  0.16889},
	{0.26270,  0.677998, 0.59302},
	{0.49941,  0.28073,  0.106098}
};

// Thanks to https://www.mathworks.com/help/images/ref/whitepoint.html
static const float3 D65_WHITE = {0.95047, 1, 1.08883};

float4 main(VS_OUTPUT input) : SV_TARGET
{
	// Rotate
	float2 uv = rotate(rotation, input.texcoord);

	// Sharpen
	for (uint x = 0; x < 2; x++)
		if (effects[x] == 2)
			sharpen(width, height, levels[x], uv);

	// Sample
	float4 rgba = sample_rgba(planes, conversion, hdr, uv);

	// Compare sample with a diff texture
	if (diffmode) {

		float4 rgba_diff = 0;

		if (hdr) {
			rgba_diff = texdiffrgb10a2.Sample(ss, uv);
		} else {
			rgba_diff = texdiffrgba.Sample(ss, uv);

			if (conversion & 0x2) // 10-bit SDR
				// Final output is normed 8-bit but the decoded frame is normed 10-bit, handle this
				// TODO: Do we actually need to do this?
				rgba = round(rgba * 255.0f) / 255.0f;
		}

		if (diffmode == 1) {
			rgba = abs(rgba - rgba_diff);
			rgba *= diffbrighten; // brighten a bit so the diff is staggering

		} else {
			float de = delta_e(
				rgba.rgb,
				rgba_diff.rgb, 
				hdr ? REC2020_TO_XYZ : REC709_TO_XYZ,
				D65_WHITE);
			
			if (de >= 2.0f) { // unacceptable - show as bright red
				rgba = float4(1, 0, 0, 1);
			} else if (de >= 1.0f) { // mediocre - lerp from red to yellow
				rgba = float4(1, lerp(1, 0, de - 1.0f), 0, 1);
			} else if (de >= 0.5f) { // satisfactory - lerp from yellow to green
				rgba = float4(lerp(0, 1, (de - 0.5f) * 2.0f), 1, 0, 1);
			} else { // great/perfect - lerp from green to black
				rgba = float4(0, lerp(0, 1, de * 2.0f), 0, 1);
			}
		}
	}

	// Effects
	for (uint y = 0; y < 2; y++)
		if (effects[y] == 1)
			scanline(input.texcoord.y, vp_height, levels[y], rgba);

	return rgba;
}
